#!/system/xbin/bash
#线刷包修改工具#
source exfunction

[ -e $tool/linux.img ] && $bb mount -o loop $tool/linux.img $AB &> /dev/null
[ -d $AB/system ] && rm -rf $AB/system 
mkdir -p $AB/system 

#1 dat转换rimg
Dat2img (){
echo
echo "使用这项功能前，你需把线刷包里的｛*.list和*.dat｝文件放于$SYSPATH目录"
sleep 2
cd $SYSPATH
Xzfile dat
if [ -f $file ] && [ -f *.list ] ;then
#IMGFR="`file -m $tbin/magic $file|busybox grep ":"|busybox awk '{print $2}'`"
echo "正在解包dat，时间较长，请耐心等待..."
echo
#sdat2img *.list $file system.img  &
wait 
sdat2img.py *.list $file system.img  &
wait 

else
echo "缺少list文件" && sleep 1 && exit
fi   
[ -f system.img ] && echo "解包$file成功" && Filesize system.img && sleep 1 || echo "解包$file失败!" && sleep 1 && exit  
Datimg
}


#选择刷机脚本
Xz () {
cd $shell
 [ ! -e *-$1 ] &> /dev/null && echo "当前目录无$1文件，自动退出" &&
sleep 1 && exit

	 local item=""
		local i=1
IFS=$''
		for item in $(ls *-$1); do
			if [[ -f $item ]]; then
				apks[$i]="$item"
				let i++
		 fi
		done
   
#ls *.$1|while read i;do echo "$i";done
		echo "请选择文件:"
	local len="${#apks[@]}"
	for (( i = 1; i <= len; i++ )); do
   Size=`Filesize0 "${apks[$i]}"`
       if [ "${apks[$i]}" == "updater-script" ];then    
		echo " ($i). ${apks[$i]} (默认)" $Size
       else      
		echo " ($i). ${apks[$i]}" $Size
       fi
	done

IFS=$' \t'
local inp	
	if ((len < 10)); then
		read -n1 -p "请选择:" inp
	else
		read -n2 -p "请选择:" inp
	fi
clear
	if [[ "$inp" == "0" ]] || [[ "$inp" -gt "len" ]]; then
echo "选择错误，自动返回..."
sleep 1
 elif [ -z $inp ];then
export file=updater-script
Filesize "$file"
	else
 #替换空格
 #mv "`echo ${apks[$inp]} | sed 's/#/ /g' `" "`echo ${apks[$inp]} |sed 's/#//g' `"  2> /dev/null   
#自动去空格
 mv "${apks[$inp]}" $(echo ${apks[$inp]}|tr -d ' ') 2>/dev/null  
#export	file="${apks[$inp]}"   
export	 file=$(echo ${apks[$inp]}|tr -d ' ')
Filesize "$file"
  fi
}

#3 卡刷包-文件夹格式
Zipsystem (){
cd $SYSPATH
Filesize system.img
    cd /
     $bb mount -o loop $SYSPATH/system.img $AB/system &> /dev/null
     cd $AB/system
     ls
read -n1 -p "修改好了回车键继续..."
cd $AB
$bb mkdir -p META-INF/com/google/android &> /dev/null
#复制刷机二进制
$bb cp -rf $tbin/update-binary META-INF/com/google/android/update-binary &> /dev/null
#选择刷机脚本
echo
echo "请将刷机脚本复制到$shell"
sleep 1
cd $shell
Xz script

cd $AB
cp -rf $shell/$file META-INF/com/google/android/updater-script
cd ./system
su_path=`find . -name su`
super_path=`find . -iname Superuser.apk`
if [ "$su_path" != "" ] && [ "$super_path" != "" ] ;then
       echo "检测到已经存在$su_path和$super_path跳过该选项"
else
echo "是否进行root操作呢？（y/n）默认n"
read root
if [ "$root" == "y" ] || [ "$root" == "Y" ] ;then
       echo "安装root..."
cp -rf $T/root/su ./system/xbin &> /dev/null
cp -rf $T/root/Superuser.apk ./system/app/Superuser.apk &> /dev/null
cd ..
echo "成功 root"
else
echo "不安装,退出root操作"
cd ..
fi
fi
cd $AB
#检测自定义boot文件
if [ -e $SYSPATH/boot.img ] ;then

$bb cp -rf $SYSPATH/boot.img ./
else
echo "在$SYSPATH未发现可用内核boot.img"
 if [ -e $BOOTPATH/boot.img ] ;then
        $bb cp -rf $BOOTPATH/boot.img ./
 else
 echo "在$BOOTPATH目录也未发现可用boot.img"
 echo "你可将boot放置于$SYSPATH或$BOOTPATH任意目录下"
 echo "正在跳出boot,请稍后......"
 sleep 2
 fi
fi
#打包命令
    echo "开始制作update.zip卡刷包，请耐心等待..."
[ -e $update ] && rm -rf $update/* > $null
    zip -r -q $update/update.zip ./* &> /dev/null
      if [ -e $update/update.zip ]
      then
      echo "制作update.zip成功,开始进行签名"
      Filesize update.zip
      else
      echo "失败，打包update没有成功"
      read -t5 -p "按回车键退出..."
      $bb rm -rf ./* &> /dev/null
      $bb umount -l $AB &> /dev/null
      exit 1
      fi
    echo "正在签名中..."
cd $update
    $signer update.zip signed-update.zip &> /dev/null
  if [ -e signed-update.zip ]
  then
  echo "签名update.zip成功"
  Filesize signed-update.zip
  $bb rm -rf update.zip &> /dev/null
  else
  echo "签名失败,请在签名功能中进行重新签名"
  fi

$bb umount -l $AB &> /dev/null
echo "请到$update目录检测signed-update.zip刷机包"
key
}

#2 simg打包dat
Img2sdat (){
echo 

cd $SYSPATH
[ ! -e img2sdat.zip ] && cp -rf $tbin/img2sdat.zip ./
Xzfile img
IMGFR=`file $file | grep ":" | awk '{print $2}'`

if [ "$IMGFR" == "data" ] ; then 
python img2sdat.zip $file ./ 
else
echo "格式不对，请重新选择"  
sleep 1
Xzfile img
fi
cd $SYSPATH
[ -e system.new.dat ] && echo "转换成功" && sleep 1 || echo "转换失败" && sleep 1 && exit
Filesize system.new.dat
read -n1 -t5 -p "回车键继续..."
echo
Datimg
}


#4.dat卡刷包
Zipdat (){
read -n1 -p "请将所需文件复制到$update回车键继续..."
echo "请直接替换回卡刷包即可"
sleep 1
}


#echo -e "以下由LONELY提供部分代码"

imgsimg4(){
echo -e "选择无效！请重新选择"
makeimg2
}

imgsimg3(){
system_size=`$bb expr $system_size \* 1024 \* 1024 - 2097152`
echo -e "正在转换，请稍候…"
if [ ! -d /LF ] ; then
  $bb mkdir /LF
fi
$bb mount -o loop -t ext4 $SYSPATH/system.img /LF
if [ $? -ne 0 ];then
  echo -e "挂载system.img文件失败！"
  echo "正在尝试另一种挂载方式…"
  $bb losetup /dev/block/loop6 $SYSPATH/system.img
  $bb mount -t ext4 /dev/block/loop6 /LF
  if [ $? -ne 0 ];then
    echo -e "使用第二种方法挂载system.img文件失败！"
  else
    make_ext4fs -s -S $SYSPATH/file_contexts -l $system_size -a system $SYSPATH/system.img /LF/
    $bb umount -vl /LF
    echo -e "转换完成！"
  fi
else
  make_ext4fs -s -S $SYSPATH/file_contexts -l $system_size -a system  $SYSPATH/system.img /LF/
  $bb umount -vl /LF
  echo -e "转换完成！"
fi
 key
}

imgsimg2(){
read gd_ok
case $gd_ok in
  1)
    imgsimg3
  ;;
  2)
    echo
    imgsimg1
  ;;
  *)
    imgsimg4
  ;;
esac
}

imgsimg1(){
echo -e "请正确的输入system分区大小单位为M"
read system_size
echo -e "你的system分区大小为: $system_size"
echo "请确认"
echo -e "1.确定    2.重新输入"
echo
imgsimg2
}

Imgsimg(){
read -n1 -t5 -p "请将img文件放到$SYSPATH文件夹,此操作得到的img文件为simg文件，转换后可直接转换为dat文件,请按回车键继续..."
echo -e "1G=1024M  1M=1024K  1K=1024B"
imgsimg1
}

#转换simg为rimg
Simgimg(){
echo -e "请将simg格式的img文件放到$SYSPATH文件夹,转换后的文件不能再转换为dat格式，但可直接刷入系统"
sleep 2
cd $SYSPATH
Xzfile img
echo "正在转换，时间较长请稍后…"
[ $file == system.img ] && mv -f system.img system.img.bak && simg2img system.img.bak system.img || simg2img $file system.img
[ -f system.img ] && echo "转换完成！" && Filesize system.img || echo "转换失败，请检查所选文件是否是simg格式"
key
Datimg
}


makeimg4(){
echo -e "选择无效！请重新选择"
makeimg2
}

makeimg3(){
system_size=`$bb expr $system_size \* 1024 \* 1024 - 2097152`
cd $SYSPATH
[ -f file_contexts ] && echo -e "正在转换，请稍候…" && make_ext4fs -s -S file_contexts -l $system_size -a system system.img $AB/system/ || echo "请将file_contexts复制到$SYSPATH后再运行"
[ -f system.img ] &&  echo -e "转换完成！" && Filesize system.img || echo "转换失败！"
key
}

makeimg2(){
read gd_ok
case $gd_ok in
  1)
    makeimg3
  ;;
  2)
    echo
    makeimg1
  ;;
  *)
    makeimg4
  ;;
esac
}

makeimg1(){
echo -e "请正确输入system分区大小单位为M"
read system_size
echo -e "你的system分区大小为: $system_size"
echo "请确认"
echo -e "1.确定      2.重新输入"
echo
makeimg2
}

#rimg转换simg
Makeimg(){
clear && cd $SYSPATH && Xzfile img && $bb mount -o loop $file $AB/system &> /dev/null
  cd $AB/system
  ls 
echo -e "此操作得到的为simg可直接转换为dat文件"
read -p "请输入img镜像大小单位M" imgsize
imgsize=${imgsize:-"512"}
cd /
make_ext4 -s -l ${imgsize}M -a system $SYSPATH/system.img $AB/system
cd $SYSPATH
[ -f system.img ] && echo "制作完成！" && Filesize system.img
$bb umount -l $AB &> $null
key
Datimg
}

#br转换dat
brdat(){
clear && cd $SYSPATH && Xzfile br 
brotli -d $file
name=${file%.*}
cd $SYSPATH
[ -f $name ] && echo "制作完成！" && Filesize $name
key
Datimg
}

#dat转换br
datbr(){
clear && cd $SYSPATH && Xzfile dat
brotli -q 6 $file
cd $SYSPATH
[ -f $file.br ] && echo "制作完成！" && Filesize $file.br
key
Datimg
}


while :
do
clear
Linker
echo
echo "  安卓5.x-6.x新格式dat解包打包工具"
echo 
echo " -1- 解包dat为img-可挂载"
echo 
echo " -2- 转换img为dat"
echo
echo " -3- 制作卡刷包-文件夹"
echo 
echo " -4- 制作卡刷包-dat格式"
echo
echo " -5- 转换文件夹为img-可转dat"
echo 
echo " -6- 转换img为img-可挂载"
echo 
echo " -7- 转换img为img-可转dat"
echo 
echo " -8- 转换img为dat(新)"
echo 
echo " -9- 转换br为dat(新)"
echo
echo " -0- 转换dat为br(新)"
echo 
read -n1 -p "请选择:" dat
clear
 [ -z $dat ] && Exlinker && exit
case $dat in
   1 ) Dat2img ;;
   2 ) Img2sdat ;;
   3 ) Zipsystem ;;
   4 ) Zipdat ;;
   5 ) Makeimg ;;
   6 ) Simgimg ;;
   7 ) Imgsimg ;;
   8 ) datimg1;;
   9 ) brdat;;
   0 ) datbr ;;
esac
done
